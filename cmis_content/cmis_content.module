<?php
// $Id$

/**
 * Implementation of hook_menu() for CMIS module.
 */
function cmis_content_menu() {
  $items = array();
  $items['cmis/create'] = array(
    'type' => MENU_NORMAL_ITEM,
    'title' => t('Create CMIS Content'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cmis_content_create_form'),
    'access callback' => 'user_access',
    'access arguments' => array('access cmis'),    
  );
  
  $items['cmis/get'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'cmis_content_get',
    'access callback' => 'user_access',
    'access arguments' => array('access cmis'),    
  );
  
  $items['cmis/block_settings_more_items_js'] = array(
    'page callback' => 'cmis_block_settings_more_items_js',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  return $items;
}

/**
 * Register custom themes for CMIS module.
 */
function cmis_content_theme() {
  return array(
    'cmis_content_create_form' => array(
      'arguments' => array('form' => NULL),
      'file' => 'cmis_content.theme.inc'
    ),
    'cmis_content_doc_view' => array(
      'arguments' => array('cmis_object_path'),
      'file' => 'cmis_content.theme.inc'
    )
  );
}

/**
 * Handle content download
 *  
 * @todo input validation 
 */
function cmis_content_get() {
  module_load_include('api.inc', 'cmis');
  
  $objectId = urldecode($_GET['id']);
  
  try {
    $repository = cmisapi_getRepositoryInfo();
    $object = cmisapi_getProperties($repository->repositoryId, $objectId);
    $content = cmisapi_getContentStream($repository->repositoryId, $objectId);
  }
  catch (CMISException $e) {
    cmis_error_handler('cmis_content_get', $e);
    drupal_set_header('HTTP/1.1 503 Service unavailable');
    exit();
  }
  
  if (ob_get_level()) {
    ob_end_clean();
  }

  drupal_set_header('Cache-Control: no-cache, must-revalidate');
  drupal_set_header('Content-type: '. $object->contentMimeType);
  drupal_set_header('Content-Disposition: attachment; filename="'. $object->title .'"');
   
  print($content);

  exit();
}

/**
 * Content create form. 
 * Implementation of hook_form().
 * 
 */
function cmis_content_create_form(& $form_state) {
  drupal_add_css(drupal_get_path('module', 'cmis_content') .'/cmis_content.css');
  
  $parts = explode('/', $_GET['q']);
  $path = implode('/', array_slice($parts, 2));

  $form['#theme'] = 'cmis_content_create_form';
  $form['create']['path'] = array(
    '#type' => 'textfield',
    '#title' => t('Path'),
    '#default_value' => '/'. $path,
    '#autocomplete_path' => 'cmis/autocomplete',
    '#size' => 70
  );

  $form['create']['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Name'),
    '#size' => 70
  );

  $form['create']['content'] = array(
    '#type' => 'textarea',
    '#title' => t('Content')
  );

  $form['create']['submit'] = array(
    '#type' => 'submit',
    '#name' => 'browse',
    '#default_value' => 'Create'
  );
  
  return $form;
}

/**
 * Handle content create form submission.
 * 
 */
function cmis_content_create_form_submit($form, &$form_state) {
  module_load_include('api.inc', 'cmis');
    
  $path = $form_state['values']['path'];
  $name = $form_state['values']['name'];
  $content = $form_state['values']['content'];
  
  // Invoke Utility Service to get content id
  try {
    $repository = cmisapi_getRepositoryInfo();
  }
  catch (CMISException $e) {
    cmis_error_handler('cmis_content_create_form_submit', $e);
    return;
  }
  
  if (!$path) {
    $path = '/'. end(explode('/', $repository->rootFolderId));
  }
    
  try {
    $cmis_folder = cmisapi_getProperties($repository->repositoryId, drupal_urlencode($path));
  }
  catch (CMISException $e) {
    cmis_error_handler('cmis_content_create_form_submit', $e);
    return;
  }
  
  if (false === $cmis_folder) {
    form_set_error('path', t('Failed to locate the target space with path @path', array('@path'=>$path)));
    return;
  }
  else {
    if ($cmis_folder->type == 'folder') {
      try {
        $cmis_object_id = cmisapi_createDocument($repository->repositoryId, 'document', array('content-type' => 'text/html', 'title' => $name), $cmis_folder->id, $content);
      }
      catch (CMISException $e) {
        cmis_error_handler('cmis_content_create_form_submit', $e);
        return;
      }
      
      if ($cmis_object_id) {
        drupal_set_message(t('CMIS content @name has been created.', array('@name' => $name)));
        $form_state['redirect'] = 'cmis/browser'. $path;
      }
      else {
        form_set_error('path', t('Unable to create @name content.', array('@name' => $name))); 
        return FALSE;
      }
    }
    else {
      form_set_error('path', t('Error when locating the target space @path error', array('@path' => $path)));
      return FALSE;
    }
  }
}

/**
 * Implementation of hook_block() for CMIS content module.
 * 
 */
function cmis_content_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      // If $op is "list", we just need to return a list of block descriptions.
      // This is used to provide a list of possible blocks to the administrator,
      // end users will not see these descriptions.
      $blocks[0] = array(
        'info' => t('CMIS Repository Document View'),
      );

      return $blocks;

    case 'configure':
      // If $op is "configure", we need to provide the administrator with a
      // configuration form. The $delta parameter tells us which block is being
      // configured. In this example, we'll allow the administrator to customize
      // the text of the first block.
      $form = array(
        '#cache' => TRUE,
      );
      
      if ($delta == 0) {
        // All we need to provide is a text field, Drupal will take care of
        // the other block configuration options and the save button.
        $form['cmis_target_document_items'] = array(
          '#tree' => TRUE,
          '#prefix' => '<div class="clear-block" id="cmis-content-items-wrapper">',
          '#suffix' => '</div>'
        );
      
        $cmis_block_items = variable_get('cmis_target_document_items', array_fill(0, 2, '/'));
        // Making sure that there is at least one item
        $cmis_block_items += count($cmis_block_items) == 0?array('/'):array();
      
        foreach ($cmis_block_items as $key => $item) {
          $form['cmis_target_document_items'][] = _cmis_content_block_settings_path_form($key, $item);
        }
      
        $form['cmis_target_document_items_more'] = array(
          '#type' => 'submit',
          '#value' => t('Add more'),
          '#description' => t("If the amount of boxes above isn't enough, click here to add more."),
          '#weight' => 1,
          '#ahah' => array(
            'path' => 'cmis/block_settings_more_items_js',
            'wrapper' => 'cmis-content-items-wrapper',
            'method' => 'replace',
            'effect' => 'fade',
          )
        );
      }
    
      return $form;
    case 'save':
      // If $op is "save", we need to save settings from the configuration form.
      // Since the first block is the only one that allows configuration, we
      // need to check $delta to make sure we only save it.
      if ($delta == 0) {
        $cmis_block_items = $edit['cmis_target_document_items'];
      
        // Removing empty items
        foreach ($cmis_block_items as $key => $cmis_block_item) {
          if (empty($cmis_block_item) || $cmis_block_item=='/') {
            unset($cmis_block_items[$key]);
          }
        }
    
        // Save configuration in `cmis_target_document_items` var
        variable_set('cmis_target_document_items', array_values($cmis_block_items));
      }
      return;
    case 'view': 
    default:
      // If $op is "view", then we need to generate the block for display
      // purposes. The $delta parameter tells us which block is being requested.
      switch ($delta) {
        case 0:
          // The subject is displayed at the top of the block. Note that it
          // should be passed through t() for translation.
          $block['subject'] = t('Documents');
          // The content of the block is typically generated by calling a custom
          // function.
          $block['content'] = cmis_content_block_content(0, variable_get('cmis_target_document_items', array()));
          break;
      }
      return $block;
  }
}

/**
 * Display CMIS document list based on the path configurations.
 * 
 */
function cmis_content_block_content($which_block, $items = array() ) {
  if (0 == $which_block) {
    $content = array();
    foreach ($items as $item) {
      if ($item != '/') {
        $content[] = theme('cmis_content_doc_view', $item);
      }
    }
    return implode('<br />', $content);
  }
}

/**
 * Utility function for generating block settings target CMIS paths.
 * 
 * @param $delta
 * @param $value
 */
function _cmis_content_block_settings_path_form($delta, $value='/') {
  return array(
    '#type' => 'textfield',
    '#title' => t('Target document path @n', array('@n' => ($delta + 1))),
    '#default_value' => $value,
    '#description' => t('The document path relative to the root of the repository.'),
    '#autocomplete_path' => 'cmis/autocomplete',
    '#size' => 60,
    '#parents' => array('cmis_target_document_items', $delta)
  );
}

/**
 * Action that generate more items in the cmis block settings page.
 * 
 */
function cmis_block_settings_more_items_js() {
  $delta = count($_POST['cmis_target_document_items']);
  
  // Build our new form element.
  $form_element = _cmis_content_block_settings_path_form($delta);
  drupal_alter('form', $form_element, array(), 'cmis_block_settings_more_items_js');

  // Build the new form.
  $form_state = array('submitted' => FALSE);
  $form_build_id = $_POST['form_build_id'];
  
  // Add the new element to the stored form. Without adding the element to the
  // form, Drupal is not aware of this new elements existence and will not
  // process it. We retreive the cached form, add the element, and resave.
  if (!$form = form_get_cache($form_build_id, $form_state)) {
    exit();
  }
  
  $form['block_settings']['cmis_target_document_items'][] = $form_element;
  form_set_cache($form_build_id, $form, $form_state);
  $form += array(
    '#post' => $_POST,
    '#programmed' => FALSE
  );

  // Rebuild the form.
  $form = form_builder('block-admin-configure', $form, $form_state);

  // Render the new output.
  $items_form = $form['block_settings']['cmis_target_document_items'];
  unset($items_form['#prefix'], $items_form['#suffix']); // Prevent duplicate wrappers.
  
  $output = theme('status_messages') . drupal_render($items_form);

  drupal_json(array('status' => TRUE, 'data' => $output));
}